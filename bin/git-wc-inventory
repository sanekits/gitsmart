#!/bin/bash

# git-wc-inventory
#
# Recursive find and maintenance of git repos. Run --help
#    It can:
#      - Produce an 'inventory' report of found repos showing wc status, remotes, etc.
#      - Launch a shell for each working copy with "mark done" and error/normal exit
#      - Use a previously generated dir list (wcfile) as input
#
#

interactive=false
wcfile_only=false
skip_mirrors=false

DEPTH=${DEPTH:-1000}  # --depth N to limit recursion depth
CurWcInventoryDepth=${CurWcInventoryDepth:-0} # todo is this unused?

die() {
    echo "ERROR: $*" >&2
    exit 1
}

help() {
    cat <<-EOF 
git-wc-inventory [root/dir]
    -> Scan root/dir for working copies.  Defaults to PWD.

git-wc-inventory -w, --wcfile-only
    -> Generate wcfile (list of dirs containing working copies), 
        but don't do report generation.

git-wc-inventory -f [path-to-file], --wcfile [path-to-file]
    -> Read working-copy pathnames from file.

git-wc-inventory -s, --skip-mirrors
    -> If there's a remote and the wc is clean relative to it, skip processing.

git-wc-inventory -i, --interactive
    -> Launch a shell for each dir after printing status, so user can do maintenance.
    User may do 'exit 0' to continue, 'exit 1' to abort, 
        or 'git-wc-inventory-mark-done' to mark current dir complete.

git-wc-inventory -d N, --depth N
    -> Limit the depth of directory tree recursion to N levels.
EOF
}

make_wc_listing() {
    local rootdir="$1"
    (
        DepthArg=
        (( "$DEPTH" > 0 )) && DepthArg="-maxdepth $DEPTH"
        cd "$rootdir" || die "Bad root dir $rootdir"
        #shellcheck disable=SC2086
        find . $DepthArg -type d -name '.git' 2>/dev/null | sed -e 's^/.git$^^' -e 's%^./%%'
    )
}

is_mirror_clean() {
    # If there's at least one remote and no dirty local files, return true
    local n_remotes=
    n_remotes="$(git remote -v | wc -l )"
    [[ $n_remotes -eq 0 ]] && { false; return; }
    # git diff-index --quiet HEAD || { false; return; }
    [[ "$(git status --porcelain | wc -l)" -gt 0 ]] && { false; return; }
    true;
}


eval_single_wc() {
    local wc_dir="$1"
    echo
    echo
    cd "${wc_dir}" || die "Can't cd to ${wc_dir}"
    echo -e "wc-found>>>\t${wc_dir}\t$PWD"
    if $skip_mirrors && is_mirror_clean "$PWD"; then
        echo -e "   ---> clean mirror, --skip-mirrors is enabled."
        return
    fi
    git remote -v 2>&1 | sed 's/^/    /'
    git branch -a 2>&1 | sed 's/^/    /'
    git status 2>&1 | sed 's/^/ :::: /'
    if $interactive ; then
        if [[  -f .git/done ]]; then
            echo "  --> skipping interactive because .git/done was found."
        else
            echo
            echo " << git-inventory subshell: >>  "
            echo "  - exit 0 to leave current shell"
            echo "  - exit 1 to terminate inventory"
            echo "  - git-wc-inventory-mark-done to mark complete"
            echo

            Ps1Tail=git-inventory bash || exit 1
        fi
    fi
}


do_inventory() {
    # Create a wc listfile and then run
    local top_dir="${1:-$PWD}" # todo what if caller passes multiple dirs?
    (
        cd "$top_dir" || die "Can't cd to $top_dir"
        if [[ -n $wcfile ]]; then 
            wc_listfile=$wcfile 
        else 
            mkdir -p /tmp/git-inventory-$$ 
            wc_listfile=/tmp/git-inventory-$$/git-inventory; 
        fi
        touch $wc_listfile
        echo -e "do_inventory>>\t$PWD"
        [[ -z $wcfile ]] && {
            make_wc_listing "$top_dir" | tee $wc_listfile
            echo "Project list written to $wc_listfile" >&2
        }
        $wcfile_only && exit 0
        #shellcheck disable=SC2046
        set -- $( grep -Ev '^ *#' "$wc_listfile" )
        for gitpath; do
            (
                eval_single_wc "$gitpath" || exit 1
            ) || die "Quit at $PWD"
        done
    )
}

if [[ -z $sourceMe ]]; then
    dirlist=()
    while [[ -n $1 ]]; do
        case $1 in
            -h|--help) shift; help "$@"; exit 1 ;;
            -i|--interactive) interactive=true;;
            -s|--skip-mirrors) skip_mirrors=true ;;
            --wcfile) shift; export wcfile="$1";;
            --depth) shift; export DEPTH="$1";; # todo trap bad depth
            --wcfile-only) wcfile_only=true;; 
            *)
                [[ -d $1 ]] || die "Unknown argument: $1"
                dirlist+=("$1")
                ;;
        esac
        shift # todo trap unknown args
    done
    do_inventory "$@"
fi
